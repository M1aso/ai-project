name: Reusable Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: string
      services:
        description: 'Services to deploy (space-separated)'
        required: false
        type: string
        default: 'auth profile content notifications chat analytics content-worker'
      image_tag:
        description: 'Image tag to deploy'
        required: true
        type: string
      namespace:
        description: 'Kubernetes namespace'
        required: false
        type: string
        default: ''
    secrets:
      KUBE_CONFIG:
        required: false
      GHCR_USERNAME:
        required: false
      GHCR_TOKEN:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    timeout-minutes: 60
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Set deployment variables
        id: vars
        run: |
          NS="${{ inputs.namespace }}"
          if [ -z "$NS" ]; then
            NS="${{ inputs.environment }}"
          fi
          echo "namespace=$NS" >> $GITHUB_OUTPUT
          
          echo "üöÄ Deployment Configuration:"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Namespace: $NS"
          echo "  Image Tag: ${{ inputs.image_tag }}"
          echo "  Services: ${{ inputs.services }}"

      - name: Derive lowercase owner for GHCR
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_ENV"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Configure kubeconfig from secret
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ -n "${KUBE_CONFIG:-}" ]; then
            mkdir -p "$HOME/.kube"
            echo "$KUBE_CONFIG" | base64 -d > "$HOME/.kube/config"
            echo "‚úì Wrote kubeconfig from secret"
          else
            echo "‚Ü∑ KUBE_CONFIG is empty; skipping. Add it as an Environment secret."
          fi

      - name: Create GHCR imagePullSecret
        env:
          NS: ${{ steps.vars.outputs.namespace }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PASSWORD: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_PASSWORD:-}" ]; then
            kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n "$NS" delete secret ghcr --ignore-not-found
            kubectl -n "$NS" create secret docker-registry ghcr \
              --docker-server=ghcr.io \
              --docker-username="$GHCR_USERNAME" \
              --docker-password="$GHCR_PASSWORD"
            echo "‚úì Created imagePullSecret 'ghcr' in namespace $NS"
          else
            echo "‚Ü∑ GHCR_USERNAME/GHCR_TOKEN not provided; skipping imagePullSecret creation."
          fi

      - name: Deploy Kubernetes manifests
        env:
          NS: ${{ steps.vars.outputs.namespace }}
        run: |
          set -euo pipefail
          if [ -d "deploy/k8s/" ]; then
            echo "Deploying Kubernetes manifests from deploy/k8s/..."
            ls -la deploy/k8s/
            kubectl apply -f deploy/k8s/ --validate=true
            echo "‚úì Kubernetes manifests deployed successfully"
            
            # Verify critical ingresses are deployed
            echo "Verifying ingress deployment..."
            kubectl get ingress -n "$NS" || echo "No ingresses found in namespace $NS"
          else
            echo "No deploy/k8s/ directory found, skipping manifest deployment"
          fi

      - name: Deploy api-gateway
        env:
          ENV: ${{ inputs.environment }}
          NS: ${{ steps.vars.outputs.namespace }}
        run: |
          set -euo pipefail
          VALUES_FILE="deploy/helm/api-gateway/values.${ENV}.yaml"
          if [ -f "$VALUES_FILE" ]; then EXTRA_VALUES=(-f "$VALUES_FILE"); else EXTRA_VALUES=(); fi
          helm upgrade --install api-gateway deploy/helm/api-gateway \
            --namespace "$NS" --create-namespace \
            --timeout 10m \
            "${EXTRA_VALUES[@]}"

      - name: Deploy services
        env:
          ENV: ${{ inputs.environment }}
          NS: ${{ steps.vars.outputs.namespace }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          SERVICES: ${{ inputs.services }}
        timeout-minutes: 30
        run: |
          set -euo pipefail
          
          echo "üöÄ Starting deployment of services: $SERVICES"
          
          # Convert services string to array
          IFS=' ' read -ra SERVICES_ARRAY <<< "$SERVICES"
          
          # Track deployment progress
          DEPLOYED_SERVICES=()
          FAILED_SERVICES=()
          
          # Services that need migrations
          MIGRATION_SERVICES=(auth profile analytics notifications)
          
          # Deploy services with migrations first
          for svc in "${SERVICES_ARRAY[@]}"; do
            if [[ " ${MIGRATION_SERVICES[*]} " =~ " $svc " ]]; then
              echo "üîÑ Deploying $svc (with migration)..."
              
              # Run migration job first
              echo "üóÑÔ∏è Running migration job for $svc..."
              kubectl delete job "${svc}-migration" -n "$NS" --ignore-not-found=true
              
              helm template "${svc}-migration" deploy/helm/migration-job \
                --set "serviceName=$svc" \
                --set "image.repository=ghcr.io/${{ env.OWNER_LC }}/$svc" \
                --set "image.tag=$IMAGE_TAG" \
                --set "namespace=$NS" | kubectl apply -f -
              
              # Wait for migration to complete
              if kubectl wait --for=condition=complete job/"${svc}-migration" -n "$NS" --timeout=180s; then
                echo "‚úÖ $svc migration completed successfully"
              else
                echo "‚ùå $svc migration failed"
                kubectl logs job/"${svc}-migration" -n "$NS" --tail=20 || true
                FAILED_SERVICES+=("$svc")
                continue
              fi
            fi
            
            # Deploy the service
            echo "üîÑ Deploying service: $svc"
            VALUES_FILE="deploy/helm/$svc/values.${ENV}.yaml"
            if [ -f "$VALUES_FILE" ]; then EXTRA_VALUES=(-f "$VALUES_FILE"); else EXTRA_VALUES=(); fi
            
            if helm upgrade --install "$svc" "deploy/helm/$svc" \
              --namespace "$NS" --create-namespace \
              --set "image.repository=ghcr.io/${{ env.OWNER_LC }}/$svc" \
              --set "image.tag=$IMAGE_TAG" \
              --timeout 10m \
              "${EXTRA_VALUES[@]}"; then
              echo "‚úÖ $svc deployed successfully"
              DEPLOYED_SERVICES+=("$svc")
            else
              echo "‚ùå $svc deployment failed"
              FAILED_SERVICES+=("$svc")
            fi
          done
          
          # Report deployment results
          echo "üìä Deployment Summary:"
          echo "‚úÖ Successfully deployed: ${DEPLOYED_SERVICES[*]:-none}"
          if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
            echo "‚ùå Failed services: ${FAILED_SERVICES[*]}"
            echo "::error::Some services failed to deploy"
            exit 1
          else
            echo "üéâ All services deployed successfully!"
          fi

      - name: Restart deployments for ConfigMap changes
        env:
          NS: ${{ steps.vars.outputs.namespace }}
          SERVICES: ${{ inputs.services }}
        run: |
          set -euo pipefail
          echo "üîÑ Restarting deployments to ensure ConfigMap changes are applied..."
          
          # Convert services string to array and add api-gateway
          IFS=' ' read -ra SERVICES_ARRAY <<< "$SERVICES"
          SERVICES_TO_RESTART=(api-gateway "${SERVICES_ARRAY[@]}")
          
          # Track successful and failed restarts
          RESTARTED_SERVICES=()
          FAILED_SERVICES=()
          
          # Restart each deployment
          for svc in "${SERVICES_TO_RESTART[@]}"; do
            echo "üîÑ Restarting deployment: $svc"
            if kubectl get deployment "$svc" -n "$NS" >/dev/null 2>&1; then
              if kubectl rollout restart "deployment/$svc" -n "$NS"; then
                echo "‚úì Successfully triggered restart for $svc"
                RESTARTED_SERVICES+=("$svc")
              else
                echo "‚ùå Failed to restart $svc"
                FAILED_SERVICES+=("$svc")
              fi
            else
              echo "‚ö†Ô∏è Deployment $svc not found, skipping restart"
            fi
          done
          
          # Wait for all restarted deployments to complete
          echo "‚è≥ Waiting for all restarted deployments to be ready..."
          for svc in "${RESTARTED_SERVICES[@]}"; do
            echo "Waiting for $svc rollout to complete..."
            if kubectl rollout status "deployment/$svc" -n "$NS" --timeout=300s; then
              echo "‚úÖ $svc rollout completed successfully"
            else
              echo "‚ùå $svc rollout failed or timed out"
              FAILED_SERVICES+=("$svc")
            fi
          done
          
          # Report results
          echo "üìä Restart Summary:"
          echo "‚úÖ Successfully restarted: ${RESTARTED_SERVICES[*]:-none}"
          if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
            echo "‚ùå Failed services: ${FAILED_SERVICES[*]}"
            echo "::warning::Some services failed to restart properly"
          else
            echo "üéâ All deployments restarted successfully!"
          fi
