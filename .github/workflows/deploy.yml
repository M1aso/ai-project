name: Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        required: true
        options: [dev, staging, prod]
      service:
        description: "Service to deploy (leave empty for all services)"
        type: choice
        required: false
        options: ["", auth, profile, content, notifications, chat, analytics, content-worker, api-gateway]
  push:
    tags:
      - "release-*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'dev' }}
    permissions:
      contents: read
      packages: read
      id-token: write  # if you use cloud OIDC
    steps:
      - uses: actions/checkout@v4

      - name: Derive lowercase owner for GHCR
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_ENV"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Configure kubeconfig from secret (optional)
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ -n "${KUBE_CONFIG:-}" ]; then
            mkdir -p "$HOME/.kube"
            echo "$KUBE_CONFIG" | base64 -d > "$HOME/.kube/config"
            echo "‚úì Wrote kubeconfig from secret"
          else
            echo "‚Ü∑ KUBE_CONFIG is empty; skipping. If you intended to use it, add it as an *Environment* secret on this repo."
          fi

      - name: Create GHCR imagePullSecret (optional)
        env:
          NS:  ${{ inputs.environment || 'dev' }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PASSWORD: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          if [ -n "${GHCR_USERNAME:-}" ] && [ -n "${GHCR_PASSWORD:-}" ]; then
            kubectl create namespace "$NS" --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n "$NS" delete secret ghcr --ignore-not-found
            kubectl -n "$NS" create secret docker-registry ghcr \
              --docker-server=ghcr.io \
              --docker-username="$GHCR_USERNAME" \
              --docker-password="$GHCR_PASSWORD"
            echo "‚úì Created imagePullSecret 'ghcr' in namespace $NS"
          else
            echo "‚Ü∑ GHCR_USERNAME/GHCR_TOKEN not provided; skipping imagePullSecret creation."
          fi

      - name: Deploy Kubernetes manifests
        env:
          NS: ${{ inputs.environment || 'dev' }}
        run: |
          set -euo pipefail
          # Deploy standalone Kubernetes manifests (they have their own namespace declarations)
          echo "Deploying Kubernetes manifests from deploy/k8s/..."
          ls -la deploy/k8s/
          kubectl apply -f deploy/k8s/ --validate=true
          echo "‚úì Kubernetes manifests deployed successfully"
          
          # Verify critical ingresses are deployed
          echo "Verifying ingress deployment..."
          kubectl get ingress -n "$NS" || echo "No ingresses found in namespace $NS"

      - name: Deploy api-gateway
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          NS:  ${{ inputs.environment || 'dev' }}
        run: |
          set -euo pipefail
          VALUES_FILE="deploy/helm/api-gateway/values.${ENV}.yaml"
          if [ -f "$VALUES_FILE" ]; then EXTRA_VALUES=(-f "$VALUES_FILE"); else EXTRA_VALUES=(); fi
          helm upgrade --install api-gateway deploy/helm/api-gateway \
            --namespace "$NS" --create-namespace \
            "${EXTRA_VALUES[@]}"

      - name: Deploy services
        env:
          ENV: ${{ inputs.environment || (github.ref_type == 'tag' && 'prod') || 'dev' }}
          NS:  ${{ inputs.environment || (github.ref_type == 'tag' && 'prod') || 'dev' }}
          TARGET_SERVICE: ${{ inputs.service }}
        run: |
          set -euo pipefail
          
          # Determine which services to deploy
          if [ -n "${TARGET_SERVICE:-}" ]; then
            if [ "$TARGET_SERVICE" = "api-gateway" ]; then
              echo "Deploying only api-gateway"
              exit 0  # api-gateway already deployed above
            else
              SERVICES=("$TARGET_SERVICE")
            fi
          else
            SERVICES=(auth profile content notifications chat analytics content-worker)
          fi
          
          # Deploy each service
          for svc in "${SERVICES[@]}"; do
            echo "Deploying service: $svc"
            VALUES_FILE="deploy/helm/$svc/values.${ENV}.yaml"
            if [ -f "$VALUES_FILE" ]; then EXTRA_VALUES=(-f "$VALUES_FILE"); else EXTRA_VALUES=(); fi
            
            # Handle swagger-ui differently (it uses public images)
            if [ "$svc" = "swagger-ui" ]; then
              helm upgrade --install "$svc" "deploy/helm/$svc" \
                --namespace "$NS" --create-namespace \
                "${EXTRA_VALUES[@]}"
            else
              # Use appropriate image tag based on environment
              if [ "$ENV" = "prod" ]; then
                IMAGE_TAG="${GITHUB_REF_NAME#release-}"  # Strip 'release-' prefix from tag
              else
                IMAGE_TAG="${{ github.sha }}"
              fi
              
              helm upgrade --install "$svc" "deploy/helm/$svc" \
                --namespace "$NS" --create-namespace \
                --set "image.repository=ghcr.io/${{ env.OWNER_LC }}/$svc" \
                --set "image.tag=$IMAGE_TAG" \
                "${EXTRA_VALUES[@]}"
            fi
          done

      - name: Restart deployments to pick up ConfigMap changes
        env:
          NS: ${{ inputs.environment || (github.ref_type == 'tag' && 'prod') || 'dev' }}
          TARGET_SERVICE: ${{ inputs.service }}
        run: |
          set -euo pipefail
          echo "üîÑ Restarting deployments to ensure ConfigMap changes are applied..."
          
          # Determine which services to restart
          if [ -n "${TARGET_SERVICE:-}" ]; then
            if [ "$TARGET_SERVICE" = "api-gateway" ]; then
              SERVICES_TO_RESTART=("api-gateway")
            else
              SERVICES_TO_RESTART=("$TARGET_SERVICE")
            fi
          else
            # Restart all services that might have ConfigMap dependencies
            SERVICES_TO_RESTART=(api-gateway auth profile content notifications chat analytics content-worker swagger-ui)
          fi
          
          # Track successful and failed restarts
          RESTARTED_SERVICES=()
          FAILED_SERVICES=()
          
          # Restart each deployment
          for svc in "${SERVICES_TO_RESTART[@]}"; do
            echo "üîÑ Restarting deployment: $svc"
            if kubectl get deployment "$svc" -n "$NS" >/dev/null 2>&1; then
              if kubectl rollout restart "deployment/$svc" -n "$NS"; then
                echo "‚úì Successfully triggered restart for $svc"
                RESTARTED_SERVICES+=("$svc")
              else
                echo "‚ùå Failed to restart $svc"
                FAILED_SERVICES+=("$svc")
              fi
            else
              echo "‚ö†Ô∏è  Deployment $svc not found, skipping restart"
            fi
          done
          
          # Wait for all restarted deployments to complete
          echo "‚è≥ Waiting for all restarted deployments to be ready..."
          for svc in "${RESTARTED_SERVICES[@]}"; do
            echo "Waiting for $svc rollout to complete..."
            if kubectl rollout status "deployment/$svc" -n "$NS" --timeout=300s; then
              echo "‚úÖ $svc rollout completed successfully"
            else
              echo "‚ùå $svc rollout failed or timed out"
              FAILED_SERVICES+=("$svc")
            fi
          done
          
          # Report results
          echo "üìä Restart Summary:"
          echo "‚úÖ Successfully restarted: ${RESTARTED_SERVICES[*]:-none}"
          if [ ${#FAILED_SERVICES[@]} -gt 0 ]; then
            echo "‚ùå Failed services: ${FAILED_SERVICES[*]}"
            echo "::error::Some services failed to restart properly"
            exit 1
          else
            echo "üéâ All deployments restarted successfully!"
          fi

