apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_http
          address:
            socket_address: { address: 0.0.0.0, port_value: {{ .Values.service.port }} }
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: default
                          domains: [ {{- if .Values.ingress.host }}"{{ .Values.ingress.host }}", {{- end }}"*" ]
                          cors:
                            allow_origin_string_match:
                              - prefix: "http://docs.45.146.164.70.nip.io"
                              - prefix: "https://docs.45.146.164.70.nip.io"
                              - exact: "*"
                            allow_methods: "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH"
                            allow_headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,Referer"
                            expose_headers: "Content-Length,Content-Range,x-envoy-upstream-service-time"
                            max_age: "86400"
                            allow_credentials: true
                          routes:
                            # Specific routes first (order matters in Envoy!)
                            - match: { prefix: "/api/content/healthz" }
                              route:
                                cluster: "content_cluster"
                                prefix_rewrite: "/api/content/healthz"
                            - match: { prefix: "/api/content" }
                              route:
                                cluster: "content_cluster"
                                prefix_rewrite: "/api/content"
                            - match: { prefix: "/api/notifications/healthz" }
                              route:
                                cluster: "notifications_cluster"
                                prefix_rewrite: "/api/healthz"
                            - match: { prefix: "/api/notifications" }
                              route:
                                cluster: "notifications_cluster"
                                prefix_rewrite: "/api/notifications"
                            - match: { prefix: "/api/chats" }
                              route:
                                cluster: "chat_cluster"
                                prefix_rewrite: "/api/chats"
                            - match: { prefix: "/api/auth/healthz" }
                              route:
                                cluster: "auth_cluster"
                                prefix_rewrite: "/api/auth/healthz"
                            - match: { prefix: "/api/auth" }
                              route:
                                cluster: "auth_cluster"
                                prefix_rewrite: "/api/auth"
                            - match: { prefix: "/api/profile/healthz" }
                              route:
                                cluster: "profile_cluster"
                                prefix_rewrite: "/api/profile/healthz"
                            - match: { prefix: "/api/profile" }
                              route:
                                cluster: "profile_cluster"
                                prefix_rewrite: "/api/profile"
                            - match: { prefix: "/api/analytics/healthz" }
                              route:
                                cluster: "analytics_cluster"
                                prefix_rewrite: "/api/analytics/healthz"
                            - match: { prefix: "/api/analytics" }
                              route:
                                cluster: "analytics_cluster"
                                prefix_rewrite: "/api/analytics"
                            # Chat WebSocket route
                            - match: { prefix: "/ws" }
                              route:
                                cluster: "chat_cluster"
                                prefix_rewrite: "/ws"
                                upgrade_configs:
                                  - upgrade_type: websocket
                            # Catch-all for root path
                            - match: { prefix: "/" }
                              direct_response:
                                status: 200
                                body:
                                  inline_string: '{"status":"ok","message":"AI Project API Gateway","services":["auth","profile","content","notifications","chat","analytics"]}'
                    http_filters:
                      # CORS filter for Swagger UI support
                      - name: envoy.filters.http.cors
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
{{- if .Values.jwtAuthn.enabled }}
                      - name: envoy.filters.http.jwt_authn
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                          providers:
                            default:
                              issuer: "{{ .Values.jwtAuthn.issuer }}"
                              remote_jwks:
                                http_uri:
                                  uri: "{{ .Values.jwtAuthn.jwksUri }}"
                                  cluster: jwks_cluster
                                  timeout: 5s
                              forward_payload_header: "x-jwt-payload"
                          rules:
                            - match: { prefix: "/" }
                              requires: { provider_name: "default" }
{{- end }}
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
{{- if .Values.jwtAuthn.enabled }}
        - name: jwks_cluster
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: jwks_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "{{ .Values.jwtAuthn.jwksHost }}"
                          port_value: {{ .Values.jwtAuthn.jwksPort }}
{{- end }}
        # Service clusters
        - name: "auth_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "auth_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "auth.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
        - name: "profile_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "profile_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "profile.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
        - name: "content_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "content_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "content.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
        - name: "notifications_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "notifications_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "notifications.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
        - name: "chat_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "chat_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "chat.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
        - name: "analytics_cluster"
          type: STRICT_DNS
          connect_timeout: 2s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: "analytics_cluster"
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "analytics.{{ $.Release.Namespace }}.svc.cluster.local"
                          port_value: 8000
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }
