apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.serviceName }}-migration
  namespace: {{ .Values.namespace }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "🗄️ Starting database migration for {{ .Values.serviceName }}..."
              
              # Check service type and run appropriate migration
              if [ "{{ .Values.serviceName }}" = "auth" ] || [ "{{ .Values.serviceName }}" = "profile" ] || [ "{{ .Values.serviceName }}" = "analytics" ]; then
                echo "Running Python/Alembic migration..."
                cd /app/app/db/migrations
                export PYTHONPATH=/app
                
                # Check current database state and fix if needed
                echo "Checking current migration state..."
                current_revision=$(alembic current 2>/dev/null | grep -o '[a-f0-9_]*$' || echo "none")
                echo "Current database revision: $current_revision"
                
                # If revision doesn't match any file, stamp with the latest
                if [ "$current_revision" != "none" ] && ! ls versions/*$current_revision*.py 2>/dev/null; then
                  echo "Database revision '$current_revision' not found in migration files"
                  echo "Stamping database with latest migration..."
                  latest_migration=$(ls versions/*.py | tail -1 | grep -o '[0-9][0-9][0-9][0-9][a-zA-Z_]*' | head -1)
                  echo "Latest migration: $latest_migration"
                  alembic stamp $latest_migration
                fi
                
                # Run migration upgrade
                alembic upgrade head
              elif [ "{{ .Values.serviceName }}" = "content" ]; then
                echo "Skipping Go migration - not implemented yet"
                echo "Content service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "chat" ]; then
                echo "Skipping Node.js migration - not implemented yet"  
                echo "Chat service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "notifications" ] || [ "{{ .Values.serviceName }}" = "content-worker" ]; then
                echo "No database migrations needed for {{ .Values.serviceName }}"
              else
                echo "Unknown service type for {{ .Values.serviceName }}"
              fi
              
              echo "✅ Migration completed successfully for {{ .Values.serviceName }}"
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres123@postgresql.postgresql.svc.cluster.local:5432/aiproject"
            - name: PYTHONPATH
              value: "/app"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
  backoffLimit: 3