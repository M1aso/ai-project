apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.serviceName }}-migration
  namespace: {{ .Values.namespace }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "🗄️ Starting database migration for {{ .Values.serviceName }}..."
              
              # Check service type and run appropriate migration
              if [ "{{ .Values.serviceName }}" = "auth" ] || [ "{{ .Values.serviceName }}" = "profile" ] || [ "{{ .Values.serviceName }}" = "analytics" ]; then
                echo "Running Python/Alembic migration..."
                cd /app/app/db/migrations
                export PYTHONPATH=/app
                
                # Check current database state and fix if needed
                echo "Checking current migration state..."
                
                # List available migration files
                echo "Available migration files:"
                ls -la versions/
                
                # Try to get current revision, handle errors gracefully
                current_revision=$(alembic current 2>/dev/null || echo "failed")
                echo "Current database revision check: $current_revision"
                
                # If alembic current fails or revision doesn't exist in files, reset to latest
                if [ "$current_revision" = "failed" ] || echo "$current_revision" | grep -q "Can't locate revision"; then
                  echo "Database has invalid or missing revision, resetting to latest migration"
                  latest_file=$(ls versions/*.py | sort | tail -1)
                  latest_revision=$(basename "$latest_file" .py)
                  echo "Stamping database with latest migration: $latest_revision"
                  alembic stamp "$latest_revision" --purge
                elif ! ls versions/*$(echo "$current_revision" | tail -1)*.py 2>/dev/null; then
                  echo "Database revision not found in migration files, resetting"
                  latest_file=$(ls versions/*.py | sort | tail -1)
                  latest_revision=$(basename "$latest_file" .py)
                  echo "Stamping database with latest migration: $latest_revision"
                  alembic stamp "$latest_revision" --purge
                fi
                
                # Run migration upgrade
                alembic upgrade head
              elif [ "{{ .Values.serviceName }}" = "content" ]; then
                echo "Skipping Go migration - not implemented yet"
                echo "Content service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "chat" ]; then
                echo "Skipping Node.js migration - not implemented yet"  
                echo "Chat service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "notifications" ] || [ "{{ .Values.serviceName }}" = "content-worker" ]; then
                echo "No database migrations needed for {{ .Values.serviceName }}"
              else
                echo "Unknown service type for {{ .Values.serviceName }}"
              fi
              
              echo "✅ Migration completed successfully for {{ .Values.serviceName }}"
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres123@postgresql.postgresql.svc.cluster.local:5432/aiproject"
            - name: PYTHONPATH
              value: "/app"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
  backoffLimit: 3