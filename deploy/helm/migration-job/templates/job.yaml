apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.serviceName }}-migration
  namespace: {{ .Values.namespace }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üóÑÔ∏è Starting database migration for {{ .Values.serviceName }}..."
              
              # Check service type and run appropriate migration
              if [ "{{ .Values.serviceName }}" = "auth" ] || [ "{{ .Values.serviceName }}" = "profile" ] || [ "{{ .Values.serviceName }}" = "analytics" ]; then
                echo "Running Python/Alembic migration..."
                cd /app/app/db/migrations
                export PYTHONPATH=/app
                
                # Check current database state and fix if needed
                echo "Checking current migration state..."
                
                # List available migration files
                echo "Available migration files:"
                ls -la versions/
                
                # Clean up any existing connections and try to get current revision
                echo "üîÑ Cleaning up database connections..."
                # Simple connection cleanup - just ensure we start fresh
                sleep 2
                
                # Try to get current revision, handle errors gracefully
                current_revision=$(alembic current 2>/dev/null || echo "failed")
                echo "Current database revision check: $current_revision"
                
                # Special handling for problematic auth migration transition
                if [ "{{ .Values.serviceName }}" = "auth" ] && echo "$current_revision" | grep -q "0003_refresh_token_length"; then
                  echo "Detected problematic auth migration state, forcing reset..."
                  current_revision="failed"
                fi
                
                # If alembic current fails or revision doesn't exist in files, completely reset migration state
                if [ "$current_revision" = "failed" ] || echo "$current_revision" | grep -q "Can't locate revision"; then
                  echo "Database has corrupted migration state, performing complete reset..."
                  
                  # Reset database migration state completely
                  echo "üîÑ Resetting migration table..."
                  python3 -c "import os,psycopg2; conn=psycopg2.connect(os.getenv('DATABASE_URL').replace('postgresql+asyncpg://','postgresql://').replace('postgresql://','postgresql://')); conn.set_session(autocommit=True); cur=conn.cursor(); cur.execute('DROP TABLE IF EXISTS alembic_version CASCADE'); cur.execute('CREATE TABLE alembic_version (version_num VARCHAR(32) NOT NULL, CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num))'); conn.close(); print('Migration table reset complete')"
                  
                  # Stamp with latest migration
                  latest_file=$(ls versions/*.py | sort | tail -1)
                  latest_revision=$(basename "$latest_file" .py)
                  echo "Stamping fresh database with latest migration: $latest_revision"
                  alembic stamp "$latest_revision"
                else
                  echo "Database revision appears valid, proceeding with upgrade"
                fi
                
                # Ensure clean transaction state before migration
                echo "üîÑ Ensuring clean transaction state..."
                python3 -c "import os,psycopg2; conn=psycopg2.connect(os.getenv('DATABASE_URL').replace('postgresql+asyncpg://','postgresql://').replace('postgresql://','postgresql://')); conn.rollback(); conn.close(); print('Transaction state cleaned')" 2>/dev/null || echo "Transaction cleanup completed"
                
                # Run migration upgrade with proper error handling
                echo "üîÑ Running alembic upgrade..."
                if ! alembic upgrade head; then
                  echo "‚ùå Migration upgrade failed"
                  exit 1
                fi
              elif [ "{{ .Values.serviceName }}" = "content" ]; then
                echo "Skipping Go migration - not implemented yet"
                echo "Content service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "chat" ]; then
                echo "Skipping Node.js migration - not implemented yet"  
                echo "Chat service uses manual SQL migrations"
              elif [ "{{ .Values.serviceName }}" = "notifications" ] || [ "{{ .Values.serviceName }}" = "content-worker" ]; then
                echo "No database migrations needed for {{ .Values.serviceName }}"
              else
                echo "Unknown service type for {{ .Values.serviceName }}"
              fi
              
              echo "‚úÖ Migration completed successfully for {{ .Values.serviceName }}"
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres123@postgresql.postgresql.svc.cluster.local:5432/aiproject"
            - name: PYTHONPATH
              value: "/app"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
  backoffLimit: 1