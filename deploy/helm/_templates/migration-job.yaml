apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.serviceName }}-migration
  namespace: {{ .Values.namespace }}
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "üóÑÔ∏è Starting database migration for {{ .Values.serviceName }}..."
              cd /app
              
              # Check service type and run appropriate migration
              if [ "{{ .Values.serviceName }}" = "auth" ] || [ "{{ .Values.serviceName }}" = "profile" ]; then
                echo "Running Python/Alembic migration..."
                export PYTHONPATH=/app
                python -m alembic -c app/db/migrations/alembic.ini upgrade head
              elif [ "{{ .Values.serviceName }}" = "content" ]; then
                echo "Running Go migration..."
                # For Go services, we'd typically use a migration tool like goose or migrate
                echo "Go migrations not implemented yet"
              else
                echo "No migrations needed for {{ .Values.serviceName }}"
              fi
              
              echo "‚úÖ Migration completed successfully for {{ .Values.serviceName }}"
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres123@postgresql.postgresql.svc.cluster.local:5432/aiproject"
            - name: PYTHONPATH
              value: "/app"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
  backoffLimit: 3